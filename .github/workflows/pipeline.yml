name: Provision & Configure AWS VM with Nginx

on:
  push:
    branches: [master]
  workflow_dispatch:  # Permet d'ex√©cuter manuellement

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: eu-north-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_aws_key_name: ${{ secrets.TF_VAR_aws_key_name }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Version plus r√©cente
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  # Version plus r√©cente
        with:
          terraform_version: 1.5.0
          
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/aws.pem
          chmod 600 ~/.ssh/aws.pem
          # Tester la cl√© SSH
          ssh-keygen -l -f ~/.ssh/aws.pem
          
      - name: Terraform Init & Apply
        run: |
          cd multi-cloud-nginx/terraform/aws
          terraform init
          terraform validate
          terraform plan
          terraform apply -auto-approve
          
          # V√©rifier que l'output existe
          terraform output aws_public_ip
          
          # Cr√©er les r√©pertoires n√©cessaires
          mkdir -p ../../scripts
          
          # Sauvegarder l'IP
          terraform output -raw aws_public_ip > ../../scripts/ip.txt
          echo "IP AWS cr√©√©e: $(cat ../../scripts/ip.txt)"
          
          # Cr√©er le fichier JSON (optionnel, selon votre script)
          echo "{\"aws\":\"$(cat ../../scripts/ip.txt)\"}" > ../../scripts/ips.json
          
      - name: Wait for Instance to be Ready
        run: |
          IP=$(cat multi-cloud-nginx/scripts/ip.txt)
          echo "Attente que l'instance $IP soit pr√™te..."
          
          # Attendre que le port SSH soit ouvert
          timeout 300 bash -c "until nc -z $IP 22; do sleep 5; echo 'Attente SSH...'; done"
          echo "Instance pr√™te!"
          
      - name: Generate Ansible Inventory
        run: |
          cd multi-cloud-nginx/scripts
          
          # V√©rifier que le script existe
          if [ ! -f "generate_inventory.py" ]; then
            echo "Erreur: generate_inventory.py non trouv√©"
            exit 1
          fi
          
          # Ex√©cuter le script
          python3 generate_inventory.py
          
          # V√©rifier que l'inventaire a √©t√© cr√©√©
          if [ -f "../ansible/inventory.ini" ]; then
            echo "‚úì Inventaire cr√©√© avec succ√®s"
            echo "Contenu de l'inventaire:"
            cat ../ansible/inventory.ini
          else
            echo "‚úó Erreur: inventaire non cr√©√©"
            exit 1
          fi
          
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
          ansible --version
          
      - name: Test Ansible Connectivity
        run: |
          cd multi-cloud-nginx/ansible
          
          # Tester l'inventaire
          echo "=== Test de l'inventaire ==="
          ansible-inventory -i inventory.ini --list
          
          # Test de ping (peut √©chouer au d√©but)
          echo "=== Test de connectivit√© ==="
          ansible aws -i inventory.ini -m ping --ssh-common-args='-o StrictHostKeyChecking=no -o ConnectTimeout=10' || echo "Ping initial √©chou√© - normal"
          
      - name: Run Ansible Playbook
        run: |
          cd multi-cloud-nginx/ansible
          
          # V√©rifier que le playbook existe
          if [ ! -f "nginx.yml" ]; then
            echo "Erreur: nginx.yml non trouv√©"
            ls -la
            exit 1
          fi
          
          # Ex√©cuter le playbook avec retry
          ansible-playbook \
            -i inventory.ini \
            nginx.yml \
            --ssh-common-args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' \
            --timeout=30 \
            -v
            
      - name: Display Results
        run: |
          IP=$(cat multi-cloud-nginx/scripts/ip.txt)
          echo "üéâ D√©ploiement termin√©!"
          echo "üåê Votre site est accessible sur: http://$IP"
          echo "üîß Pour vous connecter en SSH: ssh -i ~/.ssh/aws.pem ubuntu@$IP"
          
      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "‚ö†Ô∏è Nettoyage en cas d'√©chec..."
          cd multi-cloud-nginx/terraform/aws
          terraform destroy -auto-approve || echo "Destruction √©chou√©e"
